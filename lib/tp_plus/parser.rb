#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.1
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'
module TPPlus
  class Parser < Racc::Parser


  include TPPlus::Nodes

  attr_reader :interpreter
  def initialize(scanner, interpreter = TPPlus::Interpreter.new)
    @scanner       = scanner
    @interpreter   = interpreter
    #store list of tokens to check against for conflicting variable definitions
    @check_list = Token::KEYWORDS.except("namespace", "local")
    super()
  end

  def next_token
    t = @scanner.next_token
    @interpreter.line_count += 1 if t && t[0] == :NEWLINE

    if @vstack.any? && @vstack[-1].instance_of?(String) && !t.nil? && t[0] == :ASSIGN
      if @vstack[0] == "namespace" 
        if @vstack[-1].instance_of?(String)
          raise "variable '#{@vstack[1]}::#{@vstack[-1]}' is a keyword. Choose another identifier." if @check_list.key?(@vstack[-1])
        end
      else
        raise "variable '#{@vstack[-1]}' is a keyword. Choose another identifier." if @check_list.key?(@vstack[-1])
      end
    end

    #puts t.inspect
    t
  end

  def parse
    #@yydebug =true

    do_parse
    @interpreter
  end

  def on_error(t, val, vstack)
    #parse textblock into array on lines
    textblock = @scanner.src.split("\n")
    s = sprintf("Parse error on line #{@scanner.tok_line} column #{@scanner.tok_col}: %s (%s) \n",
    val.inspect, token_to_str(t) || '?')
    s = s + "==: #{textblock[@scanner.tok_line-2]}\n"
    s = s + "=>: #{textblock[@scanner.tok_line-1]}\n"
    s = s + "==: #{textblock[@scanner.tok_line]}\n"

    raise ParseError, s
  end

  class ParseError < StandardError ; end
##### State transition tables begin ###

racc_action_table = [
    97,    98,    99,    65,    62,   273,   274,   271,   272,   269,
   265,   159,   101,   268,   266,   276,   277,    82,   159,   335,
   159,   206,   468,    97,    97,   349,   114,   350,   129,   114,
  -104,    95,   129,   114,   251,   250,   129,   114,   156,  -104,
  -104,  -104,  -104,   472,   107,    41,   254,   128,   129,    55,
   304,   622,   128,   129,   114,    49,    50,    51,   159,   192,
   154,   108,   159,    62,   193,   159,    95,    66,   104,   104,
    95,   212,    67,    68,    95,    69,    47,    48,   207,   331,
    52,    53,    54,    73,    76,   466,    95,   270,    46,   267,
    45,    44,    31,    61,   100,   150,   151,    60,    59,    30,
    42,    43,    89,   470,  -104,   109,   160,   333,   134,   495,
    49,    50,    51,    93,    96,    39,    40,   328,    75,    96,
    70,    72,    71,    74,   459,    88,    97,    98,    99,    65,
    62,   504,    84,   279,   280,   281,    85,   283,   284,   285,
   106,   106,   -77,    82,   160,    95,   -77,   222,   160,   -78,
   110,   160,   304,   128,   129,   196,    60,    59,   117,   185,
   367,   212,   360,   118,   197,   198,   199,   200,   128,   129,
   114,    41,    93,   445,   212,    55,   185,    62,   128,   129,
   114,   119,   129,   114,   364,   120,   370,   185,   371,   393,
   128,   129,   114,    66,   628,   121,   223,   224,    67,    68,
   161,    69,    47,    48,   185,   164,    52,    53,    54,    73,
    76,   531,    95,   114,    46,   184,    45,    44,    31,    61,
   100,   514,   134,    60,    59,    30,    42,    43,    89,   201,
   114,   114,   184,   123,   517,    96,    49,    50,    51,    93,
    96,    39,    40,   184,    75,    96,    70,    72,    71,    74,
    95,    88,    97,    98,    99,    65,    62,    96,    84,    95,
   184,   366,    85,   361,   362,   363,   369,    95,    95,    82,
    60,    59,   128,   129,   114,   185,   165,    93,   129,   114,
   128,   129,   114,   169,   114,   185,    93,   172,   128,   129,
   114,   186,   129,   114,    93,    93,   196,    41,   129,   114,
   188,    55,   129,   114,   189,   197,   198,   199,   200,   190,
   628,   128,   129,   114,   628,   -86,    95,   -86,   -87,    66,
   -87,    95,   383,   380,    67,    68,   114,    69,    47,    48,
    95,   184,    52,    53,    54,    73,    76,   171,    95,    96,
    46,   184,    45,    44,    31,    61,   100,    96,    93,    60,
    59,    30,    42,    43,    89,    96,   114,   254,   128,   129,
   134,   194,    49,    50,    51,    93,    96,    39,    40,   139,
    75,   154,    70,    72,    71,    74,   195,    88,    97,    98,
    99,    65,    62,   159,    84,   114,   114,   -88,    85,   -88,
   128,   129,   114,    95,   -90,    82,   -90,    95,   375,   114,
   376,   114,   205,   154,   129,   114,   150,   151,   208,   114,
   114,   383,   436,   152,   128,   129,   114,   251,   250,   114,
    93,   114,    95,    41,    93,    96,   394,    55,   395,    95,
   155,   418,   428,   417,   371,   429,    95,   371,    95,   442,
   210,   441,    95,   211,   114,    66,    95,    95,   114,    93,
    67,    68,   212,    69,    47,    48,    93,   215,    52,    53,
    54,    73,    76,    93,    95,    93,    46,   217,    45,    44,
    31,    61,   100,    93,    93,    60,    59,    30,    42,    43,
    89,    95,   128,   129,   114,    95,   490,   491,    49,    50,
    51,    93,    96,    39,    40,   492,    75,   441,    70,    72,
    71,    74,   511,    88,   512,    49,    50,    51,    93,   212,
    84,   114,    93,   129,    85,   273,   274,   271,   272,   269,
   265,   502,   501,   268,   266,   276,   277,   254,   128,   129,
   134,   253,   128,   129,   114,   254,   128,   129,   134,   139,
   159,   154,   128,   129,   114,   154,   212,   139,   289,   154,
   128,   129,   114,    49,    50,    51,   254,   128,   129,   520,
   521,   160,   298,   299,   300,   114,   308,    95,   311,   304,
   154,    95,   314,   315,   212,    95,   150,   151,   212,   449,
   150,   151,   450,   152,   150,   151,   322,   152,   323,   324,
   325,   152,   327,   154,    93,    96,   329,   270,    93,   267,
   155,   172,    93,    96,   155,   150,   151,   336,   155,   337,
   254,   128,   129,   134,   128,   129,   134,   338,   339,   341,
   342,   343,   139,   344,   154,   139,   346,   154,   454,   348,
   356,   357,   358,   359,   160,   380,   304,   383,   384,   327,
   385,   341,   386,   279,   280,   281,   387,   283,   284,   285,
    95,   390,   393,    95,   128,   129,   134,   212,   327,   150,
   151,   159,   150,   151,   114,   139,   152,   154,   335,   152,
   129,    93,   407,   408,   128,   129,   134,    93,    96,   409,
    93,    96,   410,   155,   212,   139,   155,   154,   128,   129,
   134,   212,   212,    95,   414,   415,   360,   419,   420,   139,
   421,   154,   150,   151,   423,   424,   425,   426,   436,   152,
   437,   304,   390,    95,   447,   448,   460,   128,   129,   134,
    93,    96,   150,   151,   461,   462,   155,    95,   139,   152,
   154,   128,   129,   134,   464,   473,   150,   151,   212,   478,
    93,    96,   139,   152,   154,   480,   155,   481,   482,   129,
   484,   128,   129,   134,    93,    96,    95,   485,   390,   496,
   155,   304,   139,   304,   154,   150,   151,   327,   508,   335,
    95,   335,   152,   515,   518,   519,   522,   523,   524,   150,
   151,   525,   526,    93,    96,   532,   152,   533,   534,   155,
    95,   128,   129,   134,   128,   129,   134,    93,    96,   150,
   151,   535,   139,   155,   154,   139,   152,   154,   536,   212,
   508,   212,   335,   335,   159,   542,   212,    93,    96,   545,
   212,   212,   549,   155,   550,   128,   129,   134,   551,   304,
    95,   553,   554,    95,   449,   555,   139,   450,   154,   150,
   151,   556,   150,   151,   304,   560,   152,   561,   154,   152,
   563,   159,   564,   468,   128,   129,   134,    93,    96,   472,
    93,    96,   304,   155,    95,   139,   155,   154,   128,   129,
   134,   304,   304,   150,   151,   572,   128,   129,   134,   139,
   152,   154,   560,   454,   212,   212,   159,   139,   577,   154,
   578,    93,    96,    95,   327,   579,   341,   155,   580,   581,
   607,   159,   150,   151,   608,   609,   610,    95,   449,   152,
   611,   450,   612,   613,   614,    95,   150,   151,   615,   616,
    93,    96,   154,   152,   150,   151,   155,   617,   128,   129,
   134,   152,   618,   619,    93,    96,   128,   129,   134,   139,
   155,   154,    93,    96,   640,   641,   642,   139,   155,   154,
   128,   129,   134,   643,   644,   645,   646,   454,   128,   129,
   134,   139,   647,   154,   648,   649,   651,    95,   327,   139,
   341,   154,   652,   653,   654,    95,   150,   151,   449,   662,
   114,   450,   560,   152,   150,   151,   665,   666,   560,    95,
   nil,   152,   154,   nil,    93,    96,   nil,    95,   150,   151,
   155,   nil,    93,    96,   nil,   152,   150,   151,   155,   nil,
   nil,   nil,   nil,   152,   nil,   nil,    93,    96,   nil,   nil,
   nil,   nil,   155,   nil,    93,    96,   nil,   454,   nil,   nil,
   155,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   327,   nil,
   341,   234,   235,   238,   239,   236,   237,   nil,   240,   241,
   243,   244,   245,   247,   242,   246,   234,   235,   238,   239,
   236,   237,   nil,   240,   241,   243,   244,   245,   247,   242,
   246,   234,   235,   238,   239,   236,   237,   nil,   240,   241,
   243,   244,   245,   247,   242,   246,   234,   235,   238,   239,
   236,   237,   347,   240,   241,   243,   244,   245,   247,   242,
   246,   nil,   527,   nil,   nil,   nil,   nil,   352,   nil,   nil,
   nil,   nil,   587,   588,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   374,   582,   583,   585,   586,   589,   nil,   592,
   593,   594,   596,   595,   597,   598,   599,   604,   603,   600,
   584,   602,   601,   605,   606,   304,   nil,   nil,   nil,   nil,
   nil,   nil,   234,   235,   238,   239,   236,   237,   nil,   240,
   241,   243,   244,   245,   247,   242,   246,   304,   306,   nil,
   nil,   nil,   nil,   nil,   234,   235,   238,   239,   236,   237,
   nil,   240,   241,   243,   244,   245,   247,   242,   246,   304,
   nil,   nil,   nil,   nil,   nil,   nil,   234,   235,   238,   239,
   236,   237,   nil,   240,   241,   243,   244,   245,   247,   242,
   246,   304,   nil,   nil,   nil,   nil,   nil,   nil,   234,   235,
   238,   239,   236,   237,   nil,   240,   241,   243,   244,   245,
   247,   242,   246,   234,   235,   238,   239,   236,   237,   nil,
   240,   241,   243,   244,   245,   247,   242,   246,   234,   235,
   238,   239,   236,   237,   nil,   240,   241,   243,   244,   245,
   247,   242,   246,   234,   235,   238,   239,   236,   237,   nil,
   240,   241,   243,   244,   245,   247,   242,   246,   234,   235,
   238,   239,   236,   237,   nil,   240,   241,   243,   244,   245,
   247,   242,   246,   234,   235,   238,   239,   236,   237,   nil,
   240,   241,   243,   244,   245,   247,   242,   246,   234,   235,
   238,   239,   236,   237,   nil,   240,   241,   243,   244,   245,
   247,   242,   246,   234,   235,   238,   239,   236,   237,   nil,
   240,   241,   243,   244,   245,   247,   242,   246,   234,   235,
   238,   239,   236,   237,   nil,   240,   241,   243,   244,   245,
   247,   242,   246,   234,   235,   238,   239,   236,   237,   nil,
   240,   241,   243,   244,   245,   247,   242,   246,   234,   235,
   238,   239,   236,   237,   nil,   240,   241,   243,   244,   245,
   247,   242,   246 ]

racc_action_check = [
     0,     0,     0,     0,     0,   156,   156,   156,   156,   156,
   156,   202,     1,   156,   156,   156,   156,     0,   402,   206,
   114,    93,   412,     3,   102,   232,   205,   232,    68,    68,
    29,    65,   384,   384,   256,   256,   490,   490,    55,    29,
    29,    29,    29,   413,    39,     0,   156,   156,   156,     0,
   442,   609,   609,   609,   609,    65,    65,    65,    55,    77,
   156,    40,   134,   648,    77,   161,    68,     0,     3,   102,
   384,   456,     0,     0,   490,     0,     0,     0,    93,   205,
     0,     0,     0,     0,     0,   412,     0,   156,     0,   156,
     0,     0,     0,     0,     0,   156,   156,     0,     0,     0,
     0,     0,     0,   413,    29,    42,   114,   206,   648,   442,
     0,     0,     0,     0,     0,     0,     0,   202,     0,   609,
     0,     0,     0,     0,   402,     0,     2,     2,     2,     2,
     2,   456,     0,   156,   156,   156,     0,   156,   156,   156,
     3,   102,    55,     2,    55,   648,   134,   109,   134,   161,
    43,   161,   492,   376,   376,    87,   648,   648,    46,    70,
   288,   465,   288,    47,    87,    87,    87,    87,   118,   118,
   118,     2,   648,   391,   469,     2,    72,   649,    52,    52,
    52,    48,   611,   611,   288,    49,   290,   183,   290,   391,
   123,   123,   123,     2,   611,    50,   109,   109,     2,     2,
    56,     2,     2,     2,   186,    57,     2,     2,     2,     2,
     2,   492,     2,    44,     2,    70,     2,     2,     2,     2,
     2,   465,   649,     2,     2,     2,     2,     2,     2,    87,
    45,    60,    72,    52,   469,   118,     2,     2,     2,     2,
     2,     2,     2,   183,     2,    52,     2,     2,     2,     2,
    44,     2,   304,   304,   304,   304,   304,   123,     2,   649,
   186,   288,     2,   288,   288,   288,   288,    45,    60,   304,
   649,   649,   408,   408,   408,   187,    59,    44,   491,   491,
   512,   512,   512,    61,    62,   312,   649,    63,   550,   550,
   550,    71,   610,   610,    45,    60,   660,   304,   612,   612,
    73,   304,   643,   643,    74,   660,   660,   660,   660,    75,
   612,    53,    53,    53,   643,   292,   491,   292,   293,   304,
   293,    62,   378,   378,   304,   304,    76,   304,   304,   304,
   610,   187,   304,   304,   304,   304,   304,    62,   304,   408,
   304,   312,   304,   304,   304,   304,   304,   512,    62,   304,
   304,   304,   304,   304,   304,   550,   107,   164,   164,   164,
   164,    82,   304,   304,   304,   304,   304,   304,   304,   164,
   304,   164,   304,   304,   304,   304,    86,   304,   377,   377,
   377,   377,   377,    88,   304,   108,    89,   294,   304,   294,
   253,   253,   253,   107,   296,   377,   296,   164,   302,   171,
   302,   418,    90,   253,   617,   617,   164,   164,    95,   447,
   448,   434,   434,   164,   121,   121,   121,   153,   153,   153,
   107,    96,   108,   377,   164,   164,   319,   377,   319,   253,
   164,   353,   372,   353,   372,   373,   171,   373,   418,   389,
    98,   389,   617,    99,   613,   377,   447,   448,   618,   108,
   377,   377,   100,   377,   377,   377,   253,   101,   377,   377,
   377,   377,   377,   171,   377,   418,   377,   105,   377,   377,
   377,   377,   377,   447,   448,   377,   377,   377,   377,   377,
   377,   613,   393,   393,   393,   618,   439,   439,   377,   377,
   377,   377,   377,   377,   377,   440,   377,   440,   377,   377,
   377,   377,   463,   377,   463,   549,   549,   549,   613,   110,
   377,   115,   618,   120,   377,   195,   195,   195,   195,   195,
   195,   453,   453,   195,   195,   195,   195,   299,   299,   299,
   299,   155,   139,   139,   139,   300,   300,   300,   300,   299,
   157,   299,   614,   614,   614,   139,   159,   300,   160,   300,
   615,   615,   615,   616,   616,   616,   195,   195,   195,   477,
   477,   165,   166,   167,   168,   172,   177,   299,   184,   188,
   195,   139,   189,   190,   191,   300,   299,   299,   194,   400,
   139,   139,   400,   299,   300,   300,   197,   139,   198,   199,
   200,   300,   201,   400,   299,   299,   203,   195,   139,   195,
   299,   204,   300,   300,   139,   195,   195,   207,   300,   208,
   371,   371,   371,   371,    54,    54,    54,   210,   211,   213,
   219,   220,   371,   225,   371,    54,   226,    54,   400,   229,
   275,   278,   282,   286,   298,   305,   306,   307,   308,   400,
   309,   400,   313,   195,   195,   195,   314,   195,   195,   195,
   371,   315,   316,    54,    66,    66,    66,   327,   328,   371,
   371,   329,    54,    54,   331,    66,   371,    66,   332,    54,
   333,   335,   336,   337,    67,    67,    67,   371,   371,   338,
    54,    54,   339,   371,   340,    67,    54,    67,    69,    69,
    69,   341,   344,    66,   346,   347,   350,   354,   355,    69,
   356,    69,    66,    66,   357,   358,   359,   360,   381,    66,
   382,   383,   387,    67,   394,   395,   403,   119,   119,   119,
    66,    66,    67,    67,   405,   407,    66,    69,   119,    67,
   119,   152,   152,   152,   411,   414,    69,    69,   415,   416,
    67,    67,   152,    69,   152,   421,    67,   422,   423,   426,
   430,   169,   169,   169,    69,    69,   119,   431,   441,   443,
    69,   445,   169,   446,   169,   119,   119,   459,   460,   461,
   152,   462,   119,   468,   472,   474,   479,   480,   483,   152,
   152,   484,   487,   119,   119,   494,   152,   495,   499,   119,
   169,   192,   192,   192,   193,   193,   193,   152,   152,   169,
   169,   500,   192,   152,   192,   193,   169,   193,   503,   504,
   506,   508,   509,   510,   511,   513,   514,   169,   169,   516,
   517,   519,   520,   169,   521,   196,   196,   196,   525,   527,
   192,   528,   529,   193,   515,   530,   196,   515,   196,   192,
   192,   531,   193,   193,   533,   534,   192,   535,   515,   193,
   539,   540,   541,   543,   233,   233,   233,   192,   192,   546,
   193,   193,   553,   192,   196,   233,   193,   233,   322,   322,
   322,   554,   556,   196,   196,   557,   323,   323,   323,   322,
   196,   322,   558,   515,   560,   561,   564,   323,   567,   323,
   568,   196,   196,   233,   515,   569,   515,   196,   570,   571,
   575,   576,   233,   233,   578,   582,   583,   322,   518,   233,
   584,   518,   585,   586,   587,   323,   322,   322,   588,   589,
   233,   233,   518,   322,   323,   323,   233,   591,   324,   324,
   324,   323,   607,   608,   322,   322,   325,   325,   325,   324,
   322,   324,   323,   323,   620,   621,   623,   325,   323,   325,
   380,   380,   380,   624,   625,   628,   629,   518,   436,   436,
   436,   380,   630,   380,   631,   634,   637,   324,   518,   436,
   518,   436,   638,   639,   641,   325,   324,   324,   537,   650,
   651,   537,   653,   324,   325,   325,   656,   661,   664,   380,
   nil,   325,   537,   nil,   324,   324,   nil,   436,   380,   380,
   324,   nil,   325,   325,   nil,   380,   436,   436,   325,   nil,
   nil,   nil,   nil,   436,   nil,   nil,   380,   380,   nil,   nil,
   nil,   nil,   380,   nil,   436,   436,   nil,   537,   nil,   nil,
   436,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   537,   nil,
   537,   227,   227,   227,   227,   227,   227,   nil,   227,   227,
   227,   227,   227,   227,   227,   227,   249,   249,   249,   249,
   249,   249,   nil,   249,   249,   249,   249,   249,   249,   249,
   249,   301,   301,   301,   301,   301,   301,   nil,   301,   301,
   301,   301,   301,   301,   301,   301,   489,   489,   489,   489,
   489,   489,   227,   489,   489,   489,   489,   489,   489,   489,
   489,   nil,   489,   nil,   nil,   nil,   nil,   249,   nil,   nil,
   nil,   nil,   574,   574,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   301,   574,   574,   574,   574,   574,   nil,   574,
   574,   574,   574,   574,   574,   574,   574,   574,   574,   574,
   574,   574,   574,   574,   574,   175,   nil,   nil,   nil,   nil,
   nil,   nil,   175,   175,   175,   175,   175,   175,   nil,   175,
   175,   175,   175,   175,   175,   175,   175,   176,   175,   nil,
   nil,   nil,   nil,   nil,   176,   176,   176,   176,   176,   176,
   nil,   176,   176,   176,   176,   176,   176,   176,   176,   181,
   nil,   nil,   nil,   nil,   nil,   nil,   181,   181,   181,   181,
   181,   181,   nil,   181,   181,   181,   181,   181,   181,   181,
   181,   433,   nil,   nil,   nil,   nil,   nil,   nil,   433,   433,
   433,   433,   433,   433,   nil,   433,   433,   433,   433,   433,
   433,   433,   433,   133,   133,   133,   133,   133,   133,   nil,
   133,   133,   133,   133,   133,   133,   133,   133,   297,   297,
   297,   297,   297,   297,   nil,   297,   297,   297,   297,   297,
   297,   297,   297,   317,   317,   317,   317,   317,   317,   nil,
   317,   317,   317,   317,   317,   317,   317,   317,   318,   318,
   318,   318,   318,   318,   nil,   318,   318,   318,   318,   318,
   318,   318,   318,   321,   321,   321,   321,   321,   321,   nil,
   321,   321,   321,   321,   321,   321,   321,   321,   351,   351,
   351,   351,   351,   351,   nil,   351,   351,   351,   351,   351,
   351,   351,   351,   396,   396,   396,   396,   396,   396,   nil,
   396,   396,   396,   396,   396,   396,   396,   396,   397,   397,
   397,   397,   397,   397,   nil,   397,   397,   397,   397,   397,
   397,   397,   397,   398,   398,   398,   398,   398,   398,   nil,
   398,   398,   398,   398,   398,   398,   398,   398,   399,   399,
   399,   399,   399,   399,   nil,   399,   399,   399,   399,   399,
   399,   399,   399 ]

racc_action_pointer = [
    -4,    12,   122,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -24,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -62,
   -45,   nil,    51,    96,   160,   177,   108,    57,    75,    77,
    89,   nil,   127,   260,   563,    36,   147,    99,   nil,   223,
   178,   177,   231,   232,   nil,   -59,   603,   623,   -24,   637,
   106,   166,   123,   247,   182,   256,   273,   -12,   nil,   nil,
   nil,   nil,   339,   nil,   nil,   nil,   374,   101,   361,   333,
   348,   nil,   nil,   -32,   nil,   302,   368,   nil,   334,   337,
   403,   457,    20,   nil,   nil,   418,   nil,   303,   332,    97,
   460,   nil,   nil,   nil,    -2,   458,   nil,   nil,   117,   666,
   461,   363,   nil,   139,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  1177,    40,   nil,   nil,   nil,   nil,   481,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   680,   366,   nil,   421,    -4,   518,   nil,   497,
   440,    43,   nil,   nil,   307,   453,   509,   457,   458,   700,
   nil,   346,   512,   nil,   nil,  1096,  1118,   488,   nil,   nil,
   nil,  1140,   nil,   134,   515,   nil,   151,   222,   520,   519,
   467,   525,   740,   743,   529,   506,   774,   532,   534,   535,
   536,   482,   -11,   489,   546,   -27,    -3,   554,   559,   nil,
   567,   568,   nil,   507,   nil,   nil,   nil,   nil,   nil,   513,
   514,   nil,   nil,   nil,   nil,   511,   517,   985,   nil,   522,
   nil,   nil,   -82,   803,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1000,
   nil,   nil,   nil,   339,   nil,   nil,   -17,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   520,   nil,   nil,   521,   nil,
   nil,   nil,   522,   nil,   nil,   nil,   523,   nil,   131,   nil,
    79,   nil,   208,   211,   280,   nil,   287,  1192,   526,   477,
   485,  1015,   291,   nil,   248,   561,   587,   564,   532,   565,
   nil,   nil,   232,   567,   540,   598,   563,  1207,  1222,   403,
   nil,  1237,   817,   825,   877,   885,   nil,   608,   548,   639,
   nil,   611,   646,   618,   nil,   554,   561,   564,   572,   575,
   635,   642,   nil,   nil,   643,   nil,   644,   673,   nil,   nil,
   665,  1252,   nil,   322,   586,   587,   648,   652,   594,   595,
   601,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   560,   325,   328,   nil,   nil,   102,   374,   249,   nil,
   899,   634,   635,   662,   -20,   nil,   nil,   659,   nil,   332,
   nil,   100,   nil,   431,   608,   609,  1267,  1282,  1297,  1312,
   529,   nil,    -4,   609,   nil,   613,   nil,   672,   221,   nil,
   nil,   659,   -28,   -10,   628,   689,   632,   nil,   348,   nil,
   nil,   690,   636,   637,   nil,   nil,   697,   nil,   nil,   nil,
   641,   682,   nil,  1162,   338,   nil,   907,   nil,   nil,   463,
   388,   705,     1,   684,   nil,   712,   714,   356,   357,   nil,
   nil,   nil,   nil,   470,   nil,   nil,    22,   nil,   nil,   657,
   746,   747,   749,   395,   nil,   112,   nil,   nil,   665,   125,
   nil,   nil,   666,   nil,   753,   nil,   nil,   477,   nil,   665,
   725,   nil,   nil,   671,   731,   nil,   nil,   707,   nil,  1030,
   -16,   226,   103,   nil,   710,   734,   nil,   nil,   nil,   681,
   694,   nil,   nil,   697,   760,   nil,   788,   nil,   762,   790,
   791,   792,   229,   702,   767,   784,   706,   771,   858,   772,
   716,   718,   nil,   nil,   nil,   721,   nil,   780,   724,   725,
   760,   788,   nil,   795,   823,   825,   nil,   928,   nil,   719,
   829,   745,   nil,   803,   nil,   nil,   806,   nil,   nil,   391,
   237,   nil,   nil,   813,   822,   nil,   823,   800,   860,   nil,
   835,   836,   nil,   nil,   864,   nil,   nil,   781,   781,   820,
   823,   824,   nil,   nil,  1097,   877,   879,   nil,   854,   nil,
   nil,   nil,   799,   800,   804,   806,   807,   808,   812,   813,
   nil,   821,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   826,   826,     1,
   240,   130,   246,   391,   491,   499,   439,   352,   395,   nil,
   837,   836,   nil,   839,   844,   847,   nil,   nil,   903,   849,
   855,   855,   nil,   nil,   856,   nil,   nil,   857,   865,   866,
   nil,   924,   nil,   250,   nil,   nil,   nil,   nil,    55,   169,
   872,   927,   nil,   960,   nil,   nil,   879,   nil,   nil,   nil,
   242,   880,   nil,   nil,   966,   nil,   nil ]

racc_action_default = [
    -2,  -362,    -1,  -339,    -8,    -9,   -10,   -11,   -12,   -13,
   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -22,   -23,
   -24,   -25,   -26,   -27,   -28,   -29,   -30,   -31,   -32,   -33,
   -34,   -35,   -36,   -37,   -38,   -39,   -40,   -41,   -42,  -362,
  -362,   -45,  -362,  -362,  -362,  -362,  -362,  -362,  -362,   -68,
  -362,   -70,  -362,  -196,  -362,  -225,  -362,  -362,   -80,  -362,
  -362,   -97,  -362,  -102,  -103,  -362,  -362,  -362,  -362,  -362,
  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -146,  -149,  -150,
  -151,  -152,  -362,  -206,  -207,  -208,  -362,  -362,  -362,  -362,
  -362,  -223,  -224,  -362,  -249,  -362,  -362,  -333,  -362,  -362,
  -341,  -362,  -339,    -3,  -336,    -7,  -338,  -362,  -362,  -362,
  -341,   -56,  -102,  -104,  -225,  -362,   -57,   -58,  -362,  -362,
  -362,  -362,   -72,  -362,  -191,  -192,  -193,  -293,  -294,  -295,
   -75,  -194,  -195,   -76,  -225,  -252,  -253,  -254,  -255,  -362,
  -257,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -280,  -281,
  -282,  -283,  -362,  -362,  -292,  -362,  -362,  -226,  -228,  -341,
  -362,  -225,  -227,  -250,   -85,   -77,  -362,  -362,  -362,  -362,
   -99,  -362,  -362,  -105,  -106,  -362,  -362,  -362,  -121,  -122,
  -123,  -362,  -124,  -128,  -362,  -127,  -362,  -130,  -362,  -362,
  -362,  -341,  -362,  -362,  -341,  -362,  -362,  -362,  -362,  -362,
  -362,  -362,  -362,  -362,  -222,  -362,  -247,  -362,  -362,  -332,
  -362,  -362,  -340,  -362,  -343,   667,    -4,    -6,  -337,  -362,
  -362,   -46,   -47,   -48,   -49,  -362,  -362,  -362,   -67,  -362,
  -140,  -141,  -362,  -362,  -259,  -260,  -261,  -262,  -263,  -264,
  -265,  -266,  -267,  -268,  -269,  -270,  -271,  -272,  -256,  -362,
  -289,  -290,  -291,  -362,   -98,  -210,  -362,  -296,  -297,  -298,
  -299,  -300,  -301,  -302,  -303,  -306,  -307,  -308,  -309,  -310,
  -311,  -312,  -313,  -314,  -315,  -362,  -317,  -318,  -362,  -320,
  -321,  -322,  -362,  -324,  -325,  -326,  -362,  -229,  -362,  -251,
  -362,   -83,  -273,  -274,  -276,   -89,  -255,   -91,   -78,   -85,
   -85,  -362,  -362,  -221,  -362,  -112,  -362,  -154,  -362,  -362,
  -125,  -126,  -129,  -362,  -362,   -94,  -362,  -147,  -148,  -362,
  -209,  -211,  -362,  -362,  -362,  -362,  -217,  -341,  -362,  -362,
  -219,  -362,  -242,  -362,  -245,  -362,  -362,  -362,  -362,  -362,
  -341,  -341,   -43,   -44,  -341,   -55,  -362,   -60,   -69,   -73,
  -362,  -258,  -284,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
  -362,  -233,  -234,  -235,  -236,  -237,  -238,  -239,  -240,  -241,
   -79,  -362,  -362,  -362,   -96,  -100,  -362,    -5,  -154,  -110,
  -362,  -116,  -362,  -362,  -362,  -120,  -131,   -94,   -92,  -362,
   -95,  -143,  -137,  -362,  -362,  -362,  -212,  -213,  -214,  -215,
  -357,  -216,  -362,  -362,  -246,  -362,  -248,  -362,  -362,  -334,
  -335,  -362,  -362,  -362,  -362,  -341,  -362,  -328,  -362,  -330,
  -331,  -305,  -362,  -362,  -323,  -327,  -362,   -84,   -81,   -82,
  -362,  -362,  -111,  -362,  -154,  -114,  -362,  -108,  -153,  -362,
  -362,  -362,  -362,  -362,  -138,  -362,  -362,  -362,  -362,  -349,
  -350,  -351,  -352,  -362,  -355,  -356,  -341,  -359,  -361,  -362,
  -362,  -247,  -247,  -362,  -342,  -341,  -345,  -346,  -362,  -341,
   -51,   -52,  -362,   -59,   -61,   -63,   -64,  -362,   -74,  -362,
  -362,  -316,  -319,  -362,  -362,  -107,  -113,  -362,  -115,  -362,
  -362,  -362,  -362,   -93,  -362,  -362,  -136,  -142,  -139,  -362,
  -362,  -353,  -354,  -362,  -341,  -218,  -220,  -230,  -341,  -243,
  -244,  -285,  -362,  -362,  -341,  -357,  -362,  -341,  -357,  -341,
  -362,  -362,  -329,  -304,   -71,  -362,  -109,  -362,  -362,  -362,
  -362,  -362,  -134,  -362,  -362,  -362,  -358,  -357,  -231,  -362,
  -287,  -362,  -344,  -362,  -348,   -50,  -362,   -54,   -62,  -362,
  -362,  -101,  -117,  -362,  -362,  -132,  -362,  -362,  -155,  -157,
  -341,  -341,  -360,  -232,  -286,  -347,   -53,  -362,  -362,  -362,
  -362,  -362,  -135,  -158,  -362,  -362,  -288,   -65,  -362,  -118,
  -119,  -133,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
  -169,  -362,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,
  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -362,  -362,  -362,
  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,   -66,
  -362,  -362,  -205,  -362,  -159,  -362,  -186,  -187,  -362,  -362,
  -362,  -362,  -200,  -201,  -362,  -202,  -203,  -190,  -362,  -362,
  -161,  -362,  -162,  -362,  -163,  -188,  -164,  -165,  -362,  -362,
  -362,  -362,  -170,  -362,  -204,  -160,  -362,  -197,  -198,  -199,
  -362,  -362,  -168,  -189,  -156,  -166,  -167 ]

racc_goto_table = [
    63,   202,    63,   178,    58,   173,    58,   122,   288,     2,
   102,    11,    29,    11,    29,   229,   177,   332,   213,   326,
   290,    56,   287,    56,   404,   259,   457,   203,   225,   471,
   111,   116,   382,   293,   467,   124,   131,    64,   310,    64,
   316,   558,   310,   319,   112,   112,   168,   474,   170,   103,
   105,   163,   125,   132,   379,   228,   113,   113,   392,   389,
   112,   256,   112,   126,   259,   162,   365,   287,   179,   507,
   573,     1,   113,   226,   113,    56,   191,   183,   232,   187,
   166,    64,    64,   435,   624,   629,   260,    56,    56,   204,
    56,   255,   544,   219,   220,   547,   209,    64,   262,    64,
   256,   124,   174,   431,   230,   180,   124,   112,   112,   218,
   163,   657,   657,   658,   658,   538,   655,   221,   125,   113,
   113,   231,   354,   125,   162,   260,   345,   432,   416,   126,
   320,   440,   469,   444,   126,   130,   488,   262,   167,   258,
    56,   659,   659,   330,    64,    64,   401,   292,   216,   105,
   427,   548,   493,   252,   378,   372,   373,   302,   256,   487,
   664,   163,   566,   562,   294,   565,   434,   310,   293,   293,
   391,   112,   303,    56,   443,   296,   573,   625,   258,   656,
   661,   620,   631,   113,   634,    56,   650,   590,   591,   506,
    56,   305,   307,   312,   368,   248,   422,   309,   340,   465,
   456,   404,   404,   nil,   313,   204,   nil,   nil,    64,   nil,
   nil,   133,   nil,    56,    56,   nil,   nil,    56,   nil,   nil,
   nil,   nil,   nil,   175,   176,   nil,   181,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   355,   nil,   nil,   353,
   293,   nil,   402,   nil,   nil,   400,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   112,    56,   nil,   nil,   nil,   411,   412,
   nil,   nil,   413,   nil,   477,   113,   nil,   287,   405,   403,
   nil,   nil,   509,   510,   nil,   nil,   227,   505,   nil,   nil,
   nil,   nil,   292,   292,   nil,   nil,   nil,   446,   nil,   nil,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   294,
   294,   nil,   nil,   nil,    63,   455,   nil,   nil,    58,   249,
   296,   296,   nil,   377,   nil,    11,    29,   nil,   nil,   178,
    56,    56,   381,   nil,   nil,    56,   301,   nil,   nil,   nil,
   nil,   204,   439,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    64,   nil,    56,    56,    56,    56,   406,   nil,   317,
   318,   nil,   nil,   321,   292,   nil,   nil,   539,   nil,   430,
   nil,   483,   nil,   463,   nil,   nil,   nil,   nil,   477,   nil,
   nil,   294,   nil,   nil,   503,   nil,   230,    63,   nil,   nil,
   nil,    58,   296,   513,   179,   102,   nil,   516,    11,    29,
   351,   124,    56,   231,   nil,   nil,   nil,   nil,    56,   438,
   nil,    56,   nil,   nil,   479,   287,   nil,   nil,   125,   574,
   575,   nil,   nil,   nil,    64,   nil,   nil,   nil,   112,   126,
   455,   180,   537,   455,   540,   178,   178,   nil,   nil,   nil,
   113,   nil,   543,   499,   500,   546,   nil,   nil,   528,   529,
   nil,   287,   455,   nil,   nil,   nil,   nil,   112,   112,   486,
   nil,   nil,   nil,   nil,   nil,    64,   nil,    56,   494,   113,
   113,   497,   498,   nil,   nil,   nil,   nil,   541,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   576,   nil,   396,
   397,   398,   399,   nil,    64,    64,   nil,   nil,   nil,   567,
   179,   179,   nil,   nil,   nil,   124,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   568,   nil,   nil,   530,   nil,
   nil,   nil,   125,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   126,   nil,   nil,   nil,   180,   180,   nil,
   nil,   nil,   nil,   124,   nil,   nil,   nil,   433,   nil,   nil,
   nil,   nil,   nil,   552,   nil,   178,   626,   626,   nil,   557,
   125,   nil,   178,   nil,   nil,   nil,   637,   nil,   623,   nil,
   nil,   126,   nil,   nil,   621,   638,   nil,   nil,   nil,   569,
   570,   nil,   571,   nil,   nil,   nil,   nil,   nil,   626,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   124,   489,   nil,   nil,   nil,   633,   636,   630,
   nil,   nil,   nil,   nil,   639,   nil,   nil,   nil,   nil,   125,
   179,   627,   627,   112,   632,   635,   nil,   179,   112,   nil,
   126,   nil,   nil,   nil,   nil,   113,   nil,   nil,   nil,   nil,
   113,   nil,   nil,   nil,   660,   660,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   627,   nil,   nil,   nil,   180,   112,   112,
    64,   663,    58,    58,   180,    64,   nil,   nil,   nil,   nil,
   113,   113,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    56,
    56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    64,    64 ]

racc_goto_check = [
    66,   100,    66,    54,    60,    53,    60,    47,    52,     2,
     3,    14,    32,    14,    32,    55,    78,   109,    43,   101,
    61,    59,   106,    59,   110,    65,   135,   102,    43,    45,
    40,    40,    74,    65,   132,    64,    64,    71,    80,    71,
    52,    87,    80,    52,    66,    66,    40,    49,    40,     4,
     7,   111,    66,    66,    76,    54,    32,    32,    83,    68,
    66,   120,    66,    14,    65,   104,    56,   106,    66,   107,
    88,     1,    32,    47,    32,    59,    66,    79,    47,    79,
    59,    71,    71,    77,    90,    90,    67,    59,    59,    66,
    59,    99,    46,    40,    40,    46,    66,    71,   119,    71,
   120,    64,    71,    74,    64,    71,    64,    66,    66,     6,
   111,    62,    62,    70,    70,   107,    90,    41,    66,    32,
    32,    66,    65,    66,   104,    67,    42,    76,    56,    14,
    99,    68,    44,    83,    14,    57,    77,   119,    58,    64,
    59,    86,    86,   102,    71,    71,   101,    64,     4,     7,
    63,    49,    69,    66,    73,    61,    61,    40,   120,    74,
    87,   111,    45,   135,    66,   132,    75,    80,    65,    65,
    81,    66,    66,    59,    82,    14,    88,    89,    64,    93,
    93,    91,    92,    32,    94,    59,    95,    96,    97,   103,
    59,     5,     5,    79,   108,   114,   125,     5,   130,   131,
   134,   110,   110,   nil,     5,    66,   nil,   nil,    71,   nil,
   nil,    48,   nil,    59,    59,   nil,   nil,    59,   nil,   nil,
   nil,   nil,   nil,    48,    48,   nil,    48,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    64,   nil,   nil,    40,
    65,   nil,   100,   nil,   nil,    43,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    66,    59,   nil,   nil,   nil,    43,    43,
   nil,   nil,    43,   nil,    52,    32,   nil,   106,    54,   102,
   nil,   nil,   109,   109,   nil,   nil,    48,   101,   nil,   nil,
   nil,   nil,    64,    64,   nil,   nil,   nil,    55,   nil,   nil,
    71,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    66,
    66,   nil,   nil,   nil,    66,   120,   nil,   nil,    60,    48,
    14,    14,   nil,     2,   nil,    14,    32,   nil,   nil,    54,
    59,    59,     5,   nil,   nil,    59,    48,   nil,   nil,   nil,
   nil,    66,    78,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    71,   nil,    59,    59,    59,    59,    32,   nil,    48,
    48,   nil,   nil,    48,    64,   nil,   nil,    52,   nil,    64,
   nil,    54,   nil,    47,   nil,   nil,   nil,   nil,    52,   nil,
   nil,    66,   nil,   nil,    43,   nil,    64,    66,   nil,   nil,
   nil,    60,    14,    43,    66,     3,   nil,    43,    14,    32,
    48,    64,    59,    66,   nil,   nil,   nil,   nil,    59,     5,
   nil,    59,   nil,   nil,    40,   106,   nil,   nil,    66,    52,
    52,   nil,   nil,   nil,    71,   nil,   nil,   nil,    66,    14,
   120,    71,    43,   120,   100,    54,    54,   nil,   nil,   nil,
    32,   nil,    43,    40,    40,    43,   nil,   nil,    78,    78,
   nil,   106,   120,   nil,   nil,   nil,   nil,    66,    66,     5,
   nil,   nil,   nil,   nil,   nil,    71,   nil,    59,     5,    32,
    32,     5,     5,   nil,   nil,   nil,   nil,    47,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   100,   nil,    48,
    48,    48,    48,   nil,    71,    71,   nil,   nil,   nil,    53,
    66,    66,   nil,   nil,   nil,    64,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,     5,   nil,
   nil,   nil,    66,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    14,   nil,   nil,   nil,    71,    71,   nil,
   nil,   nil,   nil,    64,   nil,   nil,   nil,    48,   nil,   nil,
   nil,   nil,   nil,     5,   nil,    54,    54,    54,   nil,     5,
    66,   nil,    54,   nil,   nil,   nil,    53,   nil,    78,   nil,
   nil,    14,   nil,   nil,    47,    78,   nil,   nil,   nil,     5,
     5,   nil,     5,   nil,   nil,   nil,   nil,   nil,    54,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    64,    48,   nil,   nil,   nil,    64,    64,    40,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,    66,
    66,    66,    66,    66,    66,    66,   nil,    66,    66,   nil,
    14,   nil,   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,
    32,   nil,   nil,   nil,    40,    40,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    66,   nil,   nil,   nil,    71,    66,    66,
    71,    66,    60,    60,    71,    71,   nil,   nil,   nil,   nil,
    32,    32,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    59,
    59,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    71,    71 ]

racc_goto_pointer = [
   nil,    71,     9,     8,    46,    16,     4,    47,   nil,   nil,
   nil,   nil,   nil,   nil,    11,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -14,     8,   -99,   -82,  -281,  -384,  -423,   -45,   157,  -368,
   nil,   nil,  -151,   -60,   -65,  -106,  -222,    82,    79,    21,
     4,  -144,  -537,  -221,   -17,  -131,     0,   -70,  -256,  -289,
  -535,    37,   nil,  -151,  -275,  -215,  -251,  -298,   -52,     7,
  -145,  -146,  -217,  -258,   nil,   nil,  -507,  -493,  -488,  -434,
  -527,  -428,  -432,  -469,  -431,  -451,  -387,  -386,   nil,   -65,
   -87,  -182,   -62,  -271,     9,   nil,  -135,  -391,   -94,  -189,
  -308,    -5,   nil,   nil,    56,   nil,   nil,   nil,   nil,   -58,
   -95,   nil,   nil,   nil,   nil,  -160,   nil,   nil,   nil,   nil,
   -15,  -213,  -378,   nil,  -200,  -374 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,   nil,   nil,     4,     5,     6,
     7,     8,     9,    10,   138,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,   146,    32,    33,    34,    35,    36,    37,    38,
    87,   nil,   nil,   nil,   nil,   nil,   458,   nil,   297,   nil,
   475,   476,   214,    83,   127,   nil,   nil,   nil,    57,   115,
   140,   nil,    81,   291,   141,   142,   144,   295,   nil,   388,
    80,   147,    78,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   182,   nil,   nil,   nil,   nil,    77,    79,   nil,   559,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    86,   nil,
   157,   452,    90,   nil,    91,    92,   158,   nil,   nil,   nil,
   334,    94,   135,   136,   137,   233,   143,   145,   148,   149,
   153,   257,   261,   263,   264,   nil,   275,   278,   282,   286,
   451,   nil,   nil,   453,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 145, :_reduce_1,
  0, 145, :_reduce_none,
  2, 146, :_reduce_3,
  3, 146, :_reduce_4,
  2, 149, :_reduce_5,
  1, 150, :_reduce_none,
  0, 150, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_34,
  1, 147, :_reduce_35,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  4, 173, :_reduce_43,
  4, 173, :_reduce_44,
  1, 174, :_reduce_45,
  3, 172, :_reduce_46,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  5, 186, :_reduce_50,
  3, 186, :_reduce_51,
  1, 188, :_reduce_52,
  4, 188, :_reduce_53,
  3, 189, :_reduce_54,
  4, 180, :_reduce_55,
  2, 171, :_reduce_56,
  2, 169, :_reduce_57,
  2, 168, :_reduce_58,
  6, 166, :_reduce_59,
  4, 166, :_reduce_60,
  6, 166, :_reduce_61,
  8, 166, :_reduce_62,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  5, 194, :_reduce_65,
  7, 195, :_reduce_66,
  3, 197, :_reduce_67,
  1, 197, :_reduce_68,
  4, 197, :_reduce_69,
  1, 197, :_reduce_70,
  4, 200, :_reduce_71,
  2, 164, :_reduce_72,
  4, 164, :_reduce_73,
  6, 164, :_reduce_74,
  2, 178, :_reduce_75,
  2, 165, :_reduce_76,
  1, 202, :_reduce_77,
  2, 202, :_reduce_78,
  4, 204, :_reduce_79,
  1, 206, :_reduce_80,
  5, 206, :_reduce_81,
  5, 206, :_reduce_82,
  1, 205, :_reduce_83,
  3, 205, :_reduce_84,
  0, 205, :_reduce_85,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 212, :_reduce_92,
  3, 212, :_reduce_93,
  0, 212, :_reduce_94,
  1, 213, :_reduce_95,
  4, 177, :_reduce_96,
  1, 177, :_reduce_97,
  1, 211, :_reduce_98,
  2, 214, :_reduce_99,
  4, 214, :_reduce_100,
  8, 214, :_reduce_101,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  2, 216, :_reduce_105,
  2, 216, :_reduce_106,
  6, 159, :_reduce_107,
  5, 159, :_reduce_108,
  7, 161, :_reduce_109,
  1, 217, :_reduce_110,
  2, 217, :_reduce_111,
  0, 217, :_reduce_112,
  3, 220, :_reduce_113,
  1, 219, :_reduce_114,
  2, 219, :_reduce_115,
  0, 219, :_reduce_116,
  4, 221, :_reduce_117,
  10, 162, :_reduce_118,
  10, 162, :_reduce_119,
  4, 163, :_reduce_120,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 223, :_reduce_124,
  2, 223, :_reduce_125,
  2, 224, :_reduce_126,
  1, 224, :_reduce_127,
  2, 181, :_reduce_128,
  3, 183, :_reduce_129,
  2, 182, :_reduce_130,
  4, 154, :_reduce_131,
  8, 179, :_reduce_132,
  10, 179, :_reduce_133,
  7, 179, :_reduce_134,
  9, 179, :_reduce_135,
  6, 167, :_reduce_136,
  1, 225, :_reduce_137,
  2, 225, :_reduce_138,
  3, 227, :_reduce_139,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  2, 226, :_reduce_142,
  0, 226, :_reduce_none,
  1, 228, :_reduce_none,
  1, 228, :_reduce_none,
  1, 160, :_reduce_none,
  3, 160, :_reduce_147,
  3, 160, :_reduce_148,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  1, 229, :_reduce_none,
  2, 218, :_reduce_153,
  0, 218, :_reduce_154,
  8, 155, :_reduce_155,
  14, 155, :_reduce_156,
  1, 231, :_reduce_157,
  2, 231, :_reduce_158,
  1, 233, :_reduce_159,
  3, 233, :_reduce_160,
  6, 232, :_reduce_161,
  6, 232, :_reduce_162,
  6, 232, :_reduce_163,
  6, 232, :_reduce_164,
  6, 232, :_reduce_165,
  8, 232, :_reduce_166,
  8, 232, :_reduce_167,
  7, 232, :_reduce_168,
  3, 232, :_reduce_169,
  6, 232, :_reduce_170,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  2, 234, :_reduce_188,
  2, 239, :_reduce_189,
  0, 239, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  0, 201, :_reduce_196,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  3, 235, :_reduce_204,
  1, 235, :_reduce_205,
  1, 157, :_reduce_206,
  1, 242, :_reduce_207,
  1, 242, :_reduce_208,
  3, 153, :_reduce_209,
  3, 153, :_reduce_210,
  3, 230, :_reduce_211,
  4, 230, :_reduce_212,
  4, 230, :_reduce_213,
  4, 230, :_reduce_214,
  4, 230, :_reduce_215,
  4, 156, :_reduce_216,
  3, 156, :_reduce_217,
  6, 156, :_reduce_218,
  3, 156, :_reduce_219,
  6, 156, :_reduce_220,
  3, 246, :_reduce_221,
  1, 246, :_reduce_222,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 248, :_reduce_225,
  2, 248, :_reduce_226,
  2, 249, :_reduce_227,
  1, 244, :_reduce_228,
  2, 244, :_reduce_229,
  1, 247, :_reduce_230,
  2, 247, :_reduce_231,
  3, 251, :_reduce_232,
  1, 252, :_reduce_233,
  1, 252, :_reduce_234,
  1, 252, :_reduce_235,
  3, 250, :_reduce_236,
  3, 250, :_reduce_237,
  3, 250, :_reduce_238,
  3, 250, :_reduce_239,
  3, 250, :_reduce_240,
  3, 250, :_reduce_241,
  3, 176, :_reduce_242,
  6, 176, :_reduce_243,
  6, 176, :_reduce_244,
  1, 253, :_reduce_245,
  2, 253, :_reduce_246,
  0, 253, :_reduce_none,
  2, 254, :_reduce_248,
  1, 203, :_reduce_249,
  2, 203, :_reduce_250,
  3, 255, :_reduce_251,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 256, :_reduce_254,
  1, 256, :_reduce_none,
  2, 256, :_reduce_256,
  1, 256, :_reduce_257,
  3, 257, :_reduce_258,
  1, 259, :_reduce_259,
  1, 259, :_reduce_260,
  1, 259, :_reduce_261,
  1, 259, :_reduce_262,
  1, 259, :_reduce_263,
  1, 259, :_reduce_264,
  1, 259, :_reduce_265,
  1, 259, :_reduce_266,
  1, 259, :_reduce_267,
  1, 259, :_reduce_268,
  1, 259, :_reduce_269,
  1, 259, :_reduce_270,
  1, 259, :_reduce_271,
  1, 259, :_reduce_272,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  1, 258, :_reduce_none,
  1, 263, :_reduce_282,
  1, 263, :_reduce_283,
  3, 262, :_reduce_284,
  6, 215, :_reduce_285,
  8, 215, :_reduce_286,
  7, 215, :_reduce_287,
  9, 215, :_reduce_288,
  2, 209, :_reduce_289,
  2, 209, :_reduce_290,
  2, 261, :_reduce_291,
  1, 264, :_reduce_292,
  1, 208, :_reduce_none,
  1, 208, :_reduce_294,
  1, 198, :_reduce_295,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  3, 269, :_reduce_304,
  1, 269, :_reduce_305,
  1, 270, :_reduce_306,
  1, 270, :_reduce_307,
  1, 270, :_reduce_308,
  1, 270, :_reduce_309,
  1, 270, :_reduce_310,
  1, 270, :_reduce_311,
  1, 270, :_reduce_312,
  1, 270, :_reduce_313,
  1, 270, :_reduce_314,
  1, 270, :_reduce_315,
  4, 265, :_reduce_316,
  1, 271, :_reduce_317,
  1, 271, :_reduce_318,
  4, 266, :_reduce_319,
  1, 272, :_reduce_320,
  1, 272, :_reduce_321,
  1, 272, :_reduce_322,
  3, 267, :_reduce_323,
  1, 273, :_reduce_324,
  1, 273, :_reduce_325,
  1, 273, :_reduce_326,
  3, 268, :_reduce_327,
  4, 260, :_reduce_328,
  6, 260, :_reduce_329,
  4, 260, :_reduce_330,
  4, 260, :_reduce_331,
  2, 158, :_reduce_332,
  1, 151, :_reduce_333,
  4, 152, :_reduce_334,
  4, 175, :_reduce_335,
  1, 148, :_reduce_336,
  2, 148, :_reduce_337,
  1, 148, :_reduce_none,
  0, 148, :_reduce_none,
  1, 196, :_reduce_340,
  0, 196, :_reduce_none,
  5, 170, :_reduce_342,
  1, 187, :_reduce_none,
  5, 274, :_reduce_344,
  3, 274, :_reduce_345,
  1, 275, :_reduce_346,
  4, 275, :_reduce_347,
  3, 276, :_reduce_348,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  2, 190, :_reduce_353,
  2, 190, :_reduce_354,
  1, 190, :_reduce_355,
  1, 277, :_reduce_none,
  0, 277, :_reduce_none,
  5, 245, :_reduce_358,
  1, 278, :_reduce_359,
  4, 278, :_reduce_360,
  1, 279, :_reduce_none ]

racc_reduce_n = 362

racc_shift_n = 667

racc_token_table = {
  false => 0,
  :error => 1,
  :ASSIGN => 2,
  :AT_SYM => 3,
  :COMMENT => 4,
  :MESSAGE => 5,
  :WARNING => 6,
  :JUMP => 7,
  :IO_METHOD => 8,
  :INPUT => 9,
  :OUTPUT => 10,
  :NUMREG => 11,
  :POSREG => 12,
  :VREG => 13,
  :SREG => 14,
  :TIME_SEGMENT => 15,
  :DISTANCE_SEGMENT => 16,
  :ARG => 17,
  :UALM => 18,
  :TOOLREG => 19,
  :FRAMEREG => 20,
  :MOVE => 21,
  :DOT => 22,
  :TO => 23,
  :DOWNTO => 24,
  :MID => 25,
  :AT => 26,
  :ACC => 27,
  :TERM => 28,
  :OFFSET => 29,
  :SKIP => 30,
  :GROUP => 31,
  :COORD => 32,
  :MROT => 33,
  :PTH => 34,
  :WJNT => 35,
  :INC => 36,
  :BREAK => 37,
  :RTCP => 38,
  :FPLIN => 39,
  :AP_LD => 40,
  :RT_LD => 41,
  :CD => 42,
  :CR => 43,
  :INDEV => 44,
  :EV => 45,
  :PSPD => 46,
  :CTV => 47,
  :SEMICOLON => 48,
  :NEWLINE => 49,
  :STRING => 50,
  :REAL => 51,
  :DIGIT => 52,
  :WORD => 53,
  :EQUAL => 54,
  :RANGE => 55,
  :EEQUAL => 56,
  :NOTEQUAL => 57,
  :GTE => 58,
  :LTE => 59,
  :LT => 60,
  :GT => 61,
  :BANG => 62,
  :PLUS => 63,
  :MINUS => 64,
  :STAR => 65,
  :SLASH => 66,
  :DIV => 67,
  :AND => 68,
  :OR => 69,
  :MOD => 70,
  :IF => 71,
  :THEN => 72,
  :ELSE => 73,
  :ELSIF => 74,
  :END => 75,
  :UNLESS => 76,
  :FOR => 77,
  :IN => 78,
  :WHILE => 79,
  :WAIT_FOR => 80,
  :WAIT_UNTIL => 81,
  :TIMEOUT => 82,
  :AFTER => 83,
  :FANUC_USE => 84,
  :COLL_GUARD => 85,
  :SET_SKIP_CONDITION => 86,
  :NAMESPACE => 87,
  :CASE => 88,
  :WHEN => 89,
  :INDIRECT => 90,
  :POSITION => 91,
  :EVAL => 92,
  :TIMER => 93,
  :TIMER_METHOD => 94,
  :RAISE => 95,
  :ABORT => 96,
  :RETURN => 97,
  :POSITION_DATA => 98,
  :TRUE_FALSE => 99,
  :ON_OFF => 100,
  :CALL => 101,
  :RUN => 102,
  :PAUSE => 103,
  :TP_HEADER => 104,
  :TP_APPLICATION_TYPE => 105,
  :LPAREN => 106,
  :RPAREN => 107,
  :COLON => 108,
  :COMMA => 109,
  :LBRACK => 110,
  :RBRACK => 111,
  :LBRACE => 112,
  :RBRACE => 113,
  :LABEL => 114,
  :LABEL_SET => 115,
  :LABEL_POP => 116,
  :SYSTEM => 117,
  :ADDRESS => 118,
  :LPOS => 119,
  :JPOS => 120,
  :false => 121,
  :FUNCTION => 122,
  :OPERATION => 123,
  :USING => 124,
  :IMPORT => 125,
  :COMPILE => 126,
  :INLINE => 127,
  :ARROW => 128,
  :DEFAULTPOS => 129,
  :POSEATTR => 130,
  :POSEREVERSE => 131,
  :SPHERE => 132,
  :POLAR => 133,
  :ORIGIN => 134,
  :FIX => 135,
  :LOCALSTACK => 136,
  :LOCALREG => 137,
  :LOCALPOSE => 138,
  :LOCALFLAG => 139,
  :SHAREDSTACK => 140,
  :SHAREDREG => 141,
  :SHAREDPOSE => 142,
  :SHAREDFLAG => 143 }

racc_nt_base = 144

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "ASSIGN",
  "AT_SYM",
  "COMMENT",
  "MESSAGE",
  "WARNING",
  "JUMP",
  "IO_METHOD",
  "INPUT",
  "OUTPUT",
  "NUMREG",
  "POSREG",
  "VREG",
  "SREG",
  "TIME_SEGMENT",
  "DISTANCE_SEGMENT",
  "ARG",
  "UALM",
  "TOOLREG",
  "FRAMEREG",
  "MOVE",
  "DOT",
  "TO",
  "DOWNTO",
  "MID",
  "AT",
  "ACC",
  "TERM",
  "OFFSET",
  "SKIP",
  "GROUP",
  "COORD",
  "MROT",
  "PTH",
  "WJNT",
  "INC",
  "BREAK",
  "RTCP",
  "FPLIN",
  "AP_LD",
  "RT_LD",
  "CD",
  "CR",
  "INDEV",
  "EV",
  "PSPD",
  "CTV",
  "SEMICOLON",
  "NEWLINE",
  "STRING",
  "REAL",
  "DIGIT",
  "WORD",
  "EQUAL",
  "RANGE",
  "EEQUAL",
  "NOTEQUAL",
  "GTE",
  "LTE",
  "LT",
  "GT",
  "BANG",
  "PLUS",
  "MINUS",
  "STAR",
  "SLASH",
  "DIV",
  "AND",
  "OR",
  "MOD",
  "IF",
  "THEN",
  "ELSE",
  "ELSIF",
  "END",
  "UNLESS",
  "FOR",
  "IN",
  "WHILE",
  "WAIT_FOR",
  "WAIT_UNTIL",
  "TIMEOUT",
  "AFTER",
  "FANUC_USE",
  "COLL_GUARD",
  "SET_SKIP_CONDITION",
  "NAMESPACE",
  "CASE",
  "WHEN",
  "INDIRECT",
  "POSITION",
  "EVAL",
  "TIMER",
  "TIMER_METHOD",
  "RAISE",
  "ABORT",
  "RETURN",
  "POSITION_DATA",
  "TRUE_FALSE",
  "ON_OFF",
  "CALL",
  "RUN",
  "PAUSE",
  "TP_HEADER",
  "TP_APPLICATION_TYPE",
  "LPAREN",
  "RPAREN",
  "COLON",
  "COMMA",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "LABEL",
  "LABEL_SET",
  "LABEL_POP",
  "SYSTEM",
  "ADDRESS",
  "LPOS",
  "JPOS",
  "false",
  "FUNCTION",
  "OPERATION",
  "USING",
  "IMPORT",
  "COMPILE",
  "INLINE",
  "ARROW",
  "DEFAULTPOS",
  "POSEATTR",
  "POSEREVERSE",
  "SPHERE",
  "POLAR",
  "ORIGIN",
  "FIX",
  "LOCALSTACK",
  "LOCALREG",
  "LOCALPOSE",
  "LOCALFLAG",
  "SHAREDSTACK",
  "SHAREDREG",
  "SHAREDPOSE",
  "SHAREDFLAG",
  "$start",
  "program",
  "statements",
  "statement",
  "terminator",
  "block",
  "optional_newline",
  "comment",
  "message",
  "definition",
  "namespace",
  "motion_statement",
  "position_assignment",
  "label_definition",
  "address",
  "conditional",
  "inline_conditional",
  "conditional_block",
  "forloop",
  "while_loop",
  "use_statement",
  "set_skip_statement",
  "wait_statement",
  "case_statement",
  "fanuc_eval",
  "timer_method",
  "position_data",
  "raise",
  "tp_header_definition",
  "lpos_or_jpos",
  "empty_stmt",
  "warning",
  "var_system",
  "return_statement",
  "collguard_statement",
  "function",
  "tp_application_definition",
  "using_statement",
  "import_statement",
  "compile_statement",
  "var_or_indirect",
  "tp_header_value",
  "tp_tool_methods",
  "sn",
  "tp_tool_attributes",
  "tp_tool_attribute",
  "hash_value",
  "indirectable",
  "expression",
  "wait_modifier",
  "timeout_modifier",
  "after_modifier",
  "swallow_newlines",
  "label",
  "integer",
  "case_allowed_condition",
  "group_statement",
  "optional_arg",
  "function_call",
  "namespaces",
  "basic_program_call",
  "args",
  "program_call",
  "arg",
  "number",
  "signed_number",
  "var",
  "string",
  "program_vars",
  "program_var",
  "io_method",
  "indirect_thing",
  "jump",
  "elsif_conditions",
  "else_block",
  "elsif_block",
  "elsif_condition",
  "elsif_block_condition",
  "int_or_var",
  "word_list",
  "word_tuple",
  "case_conditions",
  "case_else",
  "case_condition",
  "case_allowed_statement",
  "inlineable",
  "assignment",
  "motion_modifiers",
  "motion_modifier",
  "motion_arguements",
  "valid_terminations",
  "speed",
  "time",
  "seg_actions",
  "distance",
  "optional_lpos_arg",
  "valid_motion_statements",
  "single_argument_motion_modifiers",
  "memory_types",
  "definable",
  "var_method_modifiers",
  "array",
  "assignable_range",
  "pose_range_modifiers",
  "var_without_namespaces",
  "var_with_namespaces",
  "var_method_modifier",
  "pose_range_modifier",
  "coord_system",
  "var_system_modifers",
  "var_system_modifer",
  "ns",
  "unary_expression",
  "binary_expression",
  "factor",
  "operator",
  "operation",
  "signed_var",
  "paren_expr",
  "booleans",
  "sign",
  "reg",
  "framereg",
  "localvars",
  "sharedvars",
  "definable_range",
  "reg_types",
  "frametype",
  "local_types",
  "shared_types",
  "hash",
  "hash_attributes",
  "hash_attribute",
  "optional_sign",
  "array_values",
  "array_value" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 @interpreter.nodes = val[0]
    result
end

# reduce 2 omitted

def _reduce_3(val, _values, result)
                                          result = [val[0]]
                                          result << val[1] unless val[1].nil?

    result
end

def _reduce_4(val, _values, result)
                                          result = val[0] << val[1]
                                          result << val[2] unless val[2].nil?

    result
end

def _reduce_5(val, _values, result)
 result = val[1]
    result
end

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

def _reduce_34(val, _values, result)
 result = PauseNode.new
    result
end

def _reduce_35(val, _values, result)
 result = AbortNode.new
    result
end

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

def _reduce_43(val, _values, result)
 result = LPOSNode.new(val[2])
    result
end

def _reduce_44(val, _values, result)
 result = JPOSNode.new(val[2])
    result
end

def _reduce_45(val, _values, result)
 result = EmptyStmtNode.new()
    result
end

def _reduce_46(val, _values, result)
 result = HeaderNode.new(val[0],val[2])
    result
end

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

def _reduce_50(val, _values, result)
 result = val[2]
    result
end

def _reduce_51(val, _values, result)
 result = {}
    result
end

def _reduce_52(val, _values, result)
 result = val[0]
    result
end

def _reduce_53(val, _values, result)
 result = val[0] + val[3]
    result
end

def _reduce_54(val, _values, result)
result = [ToolApplMem.new(val[0],val[2])]
    result
end

def _reduce_55(val, _values, result)
 result = ToolApplNode.new(val[0],val[3])
    result
end

def _reduce_56(val, _values, result)
 result = RaiseNode.new(val[1])
    result
end

def _reduce_57(val, _values, result)
 result = TimerMethodNode.new(val[0],val[1])
    result
end

def _reduce_58(val, _values, result)
 result = EvalNode.new(val[1])
    result
end

def _reduce_59(val, _values, result)
 result = WaitForNode.new(val[2], val[4])
    result
end

def _reduce_60(val, _values, result)
 result = WaitUntilNode.new(val[2], nil)
    result
end

def _reduce_61(val, _values, result)
 result = WaitUntilNode.new(val[2],val[5])
    result
end

def _reduce_62(val, _values, result)
 result = WaitUntilNode.new(val[2],val[5].merge(val[7]))
    result
end

# reduce 63 omitted

# reduce 64 omitted

def _reduce_65(val, _values, result)
 result = { label: val[3] }
    result
end

def _reduce_66(val, _values, result)
 result = { timeout: [val[3],val[5]] }
    result
end

def _reduce_67(val, _values, result)
result = val[0], val[2]
    result
end

def _reduce_68(val, _values, result)
 result = val[0]
    result
end

def _reduce_69(val, _values, result)
result = val[0], val[2]
    result
end

def _reduce_70(val, _values, result)
result = val[0]
    result
end

def _reduce_71(val, _values, result)
 result = val[2]
    result
end

def _reduce_72(val, _values, result)
 result = UseNode.new(val[0],val[1])
    result
end

def _reduce_73(val, _values, result)
 result = UseNode.new(val[0],val[2])
    result
end

def _reduce_74(val, _values, result)
 result = UseNode.new(val[0],val[2],val[4])
    result
end

def _reduce_75(val, _values, result)
 result = ColGuard.new(val[0],val[1])
    result
end

def _reduce_76(val, _values, result)
 result = SetSkipNode.new(val[1])
    result
end

def _reduce_77(val, _values, result)
 result = val[0]
    result
end

def _reduce_78(val, _values, result)
 result = val[0].join('_') + '_' + val[1]
    result
end

def _reduce_79(val, _values, result)
 result = CallNode.new(val[0],val[2])
    result
end

def _reduce_80(val, _values, result)
 result = val[0]
    result
end

def _reduce_81(val, _values, result)
 result = CallNode.new(val[1],val[3],async: true)
    result
end

def _reduce_82(val, _values, result)
 result = CallNode.new(nil,val[3],str_call:val[1])
    result
end

def _reduce_83(val, _values, result)
 result = [val[0]]
    result
end

def _reduce_84(val, _values, result)
 result = val[0] << val[2]
    result
end

def _reduce_85(val, _values, result)
 result = []
    result
end

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

def _reduce_92(val, _values, result)
 result = [val[0]]
    result
end

def _reduce_93(val, _values, result)
 result = val[0] << val[2]
    result
end

def _reduce_94(val, _values, result)
 result = []
    result
end

def _reduce_95(val, _values, result)
 result = FunctionVarNode.new(val[0])
    result
end

def _reduce_96(val, _values, result)
 result = FunctionReturnNode.new(val[2])
    result
end

def _reduce_97(val, _values, result)
 result = ReturnNode.new
    result
end

def _reduce_98(val, _values, result)
 result = StringNode.new(val[0])
    result
end

def _reduce_99(val, _values, result)
 result = IOMethodNode.new(val[0],val[1])
    result
end

def _reduce_100(val, _values, result)
 result = IOMethodNode.new(val[0],val[2])
    result
end

def _reduce_101(val, _values, result)
 result = IOMethodNode.new(val[0],val[2],{ pulse_time: val[4], pulse_units: val[6] })
    result
end

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

def _reduce_105(val, _values, result)
 result = JumpNode.new(val[1])
    result
end

def _reduce_106(val, _values, result)
 result = JumpIndirectNode.new(val[1])
    result
end

def _reduce_107(val, _values, result)
 result = ConditionalNode.new("if",val[1],val[2],val[3],val[4])
    result
end

def _reduce_108(val, _values, result)
 result = ConditionalNode.new("unless",val[1],val[2],[],val[3])
    result
end

def _reduce_109(val, _values, result)
 result = ConditionalBlockNode.new(val[1],val[3],val[4],val[5])
    result
end

def _reduce_110(val, _values, result)
 result = val
    result
end

def _reduce_111(val, _values, result)
 result = val[0] << val[1] << val[2]
    result
end

def _reduce_112(val, _values, result)
 result = []
    result
end

def _reduce_113(val, _values, result)
 result = ConditionalNode.new("if",val[1],val[2],[],[])
    result
end

def _reduce_114(val, _values, result)
 result = val
    result
end

def _reduce_115(val, _values, result)
 result = val[0] << val[1] << val[2]
    result
end

def _reduce_116(val, _values, result)
 result = []
    result
end

def _reduce_117(val, _values, result)
 result = ConditionalBlockNode.new(val[1],val[3],[],[])
    result
end

def _reduce_118(val, _values, result)
 result = ForNode.new(val[1],val[4],val[6],val[8],val[5])
    result
end

def _reduce_119(val, _values, result)
 result = ForNode.new(val[1],val[4],val[6],val[8],val[5])
    result
end

def _reduce_120(val, _values, result)
 result = WhileNode.new(val[1],val[2])
    result
end

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

def _reduce_124(val, _values, result)
 result = val
    result
end

def _reduce_125(val, _values, result)
 result = val[0] << val[1]
    result
end

def _reduce_126(val, _values, result)
 result = val[1]
    result
end

def _reduce_127(val, _values, result)
 result = val[0]
    result
end

def _reduce_128(val, _values, result)
 result = UsingNode.new(val[1])
    result
end

def _reduce_129(val, _values, result)
 result = ImportNode.new(val[2],compile: true)
    result
end

def _reduce_130(val, _values, result)
 result = ImportNode.new(val[1])
    result
end

def _reduce_131(val, _values, result)
 result = NamespaceNode.new(val[1],val[2])
    result
end

def _reduce_132(val, _values, result)
 result = FunctionNode.new(val[2],val[4],val[6], '', true)
    result
end

def _reduce_133(val, _values, result)
 result = FunctionNode.new(val[2],val[4],val[8],val[7], true)
    result
end

def _reduce_134(val, _values, result)
 result = FunctionNode.new(val[1],val[3],val[5])
    result
end

def _reduce_135(val, _values, result)
 result = FunctionNode.new(val[1],val[3],val[7],val[6])
    result
end

def _reduce_136(val, _values, result)
 result = CaseNode.new(val[1],val[3],val[4])
    result
end

def _reduce_137(val, _values, result)
 result = val
    result
end

def _reduce_138(val, _values, result)
 result = val[0] << val[1] << val[2]
    result
end

def _reduce_139(val, _values, result)
result = CaseConditionNode.new(val[1],val[2])
    result
end

# reduce 140 omitted

# reduce 141 omitted

def _reduce_142(val, _values, result)
result = CaseConditionNode.new(nil,val[1])
    result
end

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

def _reduce_147(val, _values, result)
 result = InlineConditionalNode.new(val[1], val[2], val[0])
    result
end

def _reduce_148(val, _values, result)
 result = InlineConditionalNode.new(val[1], val[2], val[0])
    result
end

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

def _reduce_153(val, _values, result)
 result = val[1]
    result
end

def _reduce_154(val, _values, result)
 result = []
    result
end

def _reduce_155(val, _values, result)
 result = MotionNode.new(val[0],nil,val[5],val[7])
    result
end

def _reduce_156(val, _values, result)
 result = MotionNode.new(val[0],val[5],val[11],val[13])
    result
end

def _reduce_157(val, _values, result)
 result = val
    result
end

def _reduce_158(val, _values, result)
 result = val[0] << val[1]
    result
end

def _reduce_159(val, _values, result)
 result = [val[0]]
    result
end

def _reduce_160(val, _values, result)
 result = [val[0], val[2]]
    result
end

def _reduce_161(val, _values, result)
 result = SpeedNode.new(val[4])
    result
end

def _reduce_162(val, _values, result)
 result = AccNode.new(val[4])
    result
end

def _reduce_163(val, _values, result)
 result = TerminationNode.new(val[2],val[4][0],val[4][1])
    result
end

def _reduce_164(val, _values, result)
 result = TerminationNode.new(val[2],val[4],nil)
    result
end

def _reduce_165(val, _values, result)
 result = OffsetNode.new(val[2],val[4])
    result
end

def _reduce_166(val, _values, result)
 result = TimeNode.new(val[2],val[4],val[6])
    result
end

def _reduce_167(val, _values, result)
 result = DistanceNode.new(val[2],val[4],val[6])
    result
end

def _reduce_168(val, _values, result)
 result = SkipNode.new(val[4],val[5])
    result
end

def _reduce_169(val, _values, result)
 result = StatementModifierNode.new(val[2])
    result
end

def _reduce_170(val, _values, result)
 result = ArguementModifierNode.new(val[2],val[4])
    result
end

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

def _reduce_188(val, _values, result)
                                         raise Racc::ParseError, sprintf("\ninvalid termination type: (%s)", val[1]) if val[1] != 1

                                         result = DigitNode.new(val[1].to_i * -1)

    result
end

def _reduce_189(val, _values, result)
 result = val[1]
    result
end

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

def _reduce_196(val, _values, result)
 result = nil
    result
end

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

def _reduce_204(val, _values, result)
 result = { speed: val[0], units: val[2] }
    result
end

def _reduce_205(val, _values, result)
 result = { speed: val[0], units: nil }
    result
end

def _reduce_206(val, _values, result)
 result = LabelDefinitionNode.new(val[0])
    result
end

def _reduce_207(val, _values, result)
 result = 1
    result
end

def _reduce_208(val, _values, result)
 result = 2
    result
end

def _reduce_209(val, _values, result)
result = StackDefinitionNode.new(val[0], val[2])
    result
end

def _reduce_210(val, _values, result)
 result = RegDefinitionNode.new(val[0], val[2])
    result
end

def _reduce_211(val, _values, result)
 result = AssignmentNode.new(val[0],val[2])
    result
end

def _reduce_212(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],"+",val[3])
                                         )

    result
end

def _reduce_213(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],"-",val[3])
                                         )

    result
end

def _reduce_214(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],"*",val[3])
                                         )

    result
end

def _reduce_215(val, _values, result)
 result = AssignmentNode.new(
                                           val[0],
                                           ExpressionNode.new(val[0],"/",val[3])
                                         )

    result
end

def _reduce_216(val, _values, result)
 result = PoseDefaultNode.new(val[1],val[3])
    result
end

def _reduce_217(val, _values, result)
 result = PoseNode.new(val[0],val[2])
    result
end

def _reduce_218(val, _values, result)
 result = PoseRangeNode.new(val[1],val[3],val[5])
    result
end

def _reduce_219(val, _values, result)
result = PoseAssignNode.new(val[0], val[2])
    result
end

def _reduce_220(val, _values, result)
result = PoseAssignNode.new(val[0], val[3], val[5])
    result
end

def _reduce_221(val, _values, result)
result = RangeNode.new(val[0], val[2])
    result
end

def _reduce_222(val, _values, result)
result = RangeNode.new(val[0], val[0])
    result
end

# reduce 223 omitted

# reduce 224 omitted

def _reduce_225(val, _values, result)
 result = VarNode.new(val[0])
    result
end

def _reduce_226(val, _values, result)
 result = VarMethodNode.new(val[0],val[1])
    result
end

def _reduce_227(val, _values, result)
 result = NamespacedVarNode.new(val[0],val[1])
    result
end

def _reduce_228(val, _values, result)
 result = val[0]
    result
end

def _reduce_229(val, _values, result)
 result = val[0].merge(val[1])
    result
end

def _reduce_230(val, _values, result)
 result = val[0]
    result
end

def _reduce_231(val, _values, result)
 result = val[0].merge(val[1])
    result
end

def _reduce_232(val, _values, result)
 result = {mod: val[2]}
    result
end

def _reduce_233(val, _values, result)
 result = val[0]
    result
end

def _reduce_234(val, _values, result)
 result = val[0]
    result
end

def _reduce_235(val, _values, result)
 result = val[0]
    result
end

def _reduce_236(val, _values, result)
 result = { method: val[2] }
    result
end

def _reduce_237(val, _values, result)
 result = { group: val[2] }
    result
end

def _reduce_238(val, _values, result)
 result = { pose: val[2] }
    result
end

def _reduce_239(val, _values, result)
 result = { offset: true }
    result
end

def _reduce_240(val, _values, result)
 result = { coord: val[2] }
    result
end

def _reduce_241(val, _values, result)
 result = { fix: true }
    result
end

def _reduce_242(val, _values, result)
 result = SystemDefinitionNode.new(val[1], nil, val[2])
    result
end

def _reduce_243(val, _values, result)
 result = SystemDefinitionNode.new(val[1], val[3], val[5])
    result
end

def _reduce_244(val, _values, result)
 result = SystemDefinitionNode.new("[#{val[2]}]#{val[4]}", nil, val[5])
    result
end

def _reduce_245(val, _values, result)
 result = [val[0]]
    result
end

def _reduce_246(val, _values, result)
result =  val[0] << val[1]
    result
end

# reduce 247 omitted

def _reduce_248(val, _values, result)
 result = val[1]
    result
end

def _reduce_249(val, _values, result)
 result = [val[0]]
    result
end

def _reduce_250(val, _values, result)
 result = val[0] << val[1]
    result
end

def _reduce_251(val, _values, result)
 result = val[0]
    result
end

# reduce 252 omitted

# reduce 253 omitted

def _reduce_254(val, _values, result)
 result = val[0]
    result
end

# reduce 255 omitted

def _reduce_256(val, _values, result)
 result = UnaryExpressionNode.new("!",val[1])
    result
end

def _reduce_257(val, _values, result)
 result = val[0]
    result
end

def _reduce_258(val, _values, result)
 result = ExpressionNode.new(val[0], val[1], val[2])
    result
end

def _reduce_259(val, _values, result)
 result = "=="
    result
end

def _reduce_260(val, _values, result)
 result = "<>"
    result
end

def _reduce_261(val, _values, result)
 result = "<"
    result
end

def _reduce_262(val, _values, result)
 result = ">"
    result
end

def _reduce_263(val, _values, result)
 result = ">="
    result
end

def _reduce_264(val, _values, result)
 result = "<="
    result
end

def _reduce_265(val, _values, result)
 result = "+"
    result
end

def _reduce_266(val, _values, result)
 result = "-"
    result
end

def _reduce_267(val, _values, result)
 result = "||"
    result
end

def _reduce_268(val, _values, result)
 result = "*"
    result
end

def _reduce_269(val, _values, result)
 result = "/"
    result
end

def _reduce_270(val, _values, result)
 result = "DIV"
    result
end

def _reduce_271(val, _values, result)
 result = "%"
    result
end

def _reduce_272(val, _values, result)
 result = "&&"
    result
end

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

def _reduce_282(val, _values, result)
 result = BooleanNode.new(val[0])
    result
end

def _reduce_283(val, _values, result)
 result = BooleanNode.new(val[0])
    result
end

def _reduce_284(val, _values, result)
 result = ParenExpressionNode.new(val[1])
    result
end

def _reduce_285(val, _values, result)
 result = IndirectNode.new(val[2].to_sym, val[4], nil)
    result
end

def _reduce_286(val, _values, result)
 result = IndirectNode.new(val[2].to_sym, val[4], nil, val[6])
    result
end

def _reduce_287(val, _values, result)
 result = IndirectNode.new(val[2].to_sym, val[4], val[6])
    result
end

def _reduce_288(val, _values, result)
 result = IndirectNode.new(val[2].to_sym, val[4], val[8], val[6])
    result
end

def _reduce_289(val, _values, result)
                                          val[1] = val[1].to_i * -1 if val[0] == "-"
                                          result = DigitNode.new(val[1])

    result
end

def _reduce_290(val, _values, result)
 val[1] = val[1].to_f * -1 if val[0] == "-"; result = RealNode.new(val[1])
    result
end

def _reduce_291(val, _values, result)
 result = ExpressionNode.new(
                                          val[1],
                                          "*",
                                          DigitNode.new(-1)
                                        )
    result
end

def _reduce_292(val, _values, result)
 result = "-"
    result
end

# reduce 293 omitted

def _reduce_294(val, _values, result)
 result = RealNode.new(val[0])
    result
end

def _reduce_295(val, _values, result)
 result = DigitNode.new(val[0])
    result
end

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

# reduce 300 omitted

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

def _reduce_304(val, _values, result)
result = RangeNode.new(val[0].to_i, val[2].to_i)
    result
end

def _reduce_305(val, _values, result)
 result = RangeNode.new(val[0].to_i, val[0].to_i)
    result
end

def _reduce_306(val, _values, result)
result = val[0]
    result
end

def _reduce_307(val, _values, result)
result = val[0]
    result
end

def _reduce_308(val, _values, result)
result = val[0]
    result
end

def _reduce_309(val, _values, result)
result = val[0]
    result
end

def _reduce_310(val, _values, result)
result = val[0]
    result
end

def _reduce_311(val, _values, result)
result = val[0]
    result
end

def _reduce_312(val, _values, result)
result = val[0]
    result
end

def _reduce_313(val, _values, result)
result = val[0]
    result
end

def _reduce_314(val, _values, result)
result = val[0]
    result
end

def _reduce_315(val, _values, result)
result = val[0]
    result
end

def _reduce_316(val, _values, result)
 val[2].setType(val[0]) ; result = val[2]
    result
end

def _reduce_317(val, _values, result)
 result = val[0]
    result
end

def _reduce_318(val, _values, result)
 result = val[0]
    result
end

def _reduce_319(val, _values, result)
 result = FrameNode.new(val[0], val[2].to_i)
    result
end

def _reduce_320(val, _values, result)
result = val[0]
    result
end

def _reduce_321(val, _values, result)
result = val[0]
    result
end

def _reduce_322(val, _values, result)
result = val[0]
    result
end

def _reduce_323(val, _values, result)
result = LocalDefinitionNode.new(val[0])
    result
end

def _reduce_324(val, _values, result)
result = val[0]
    result
end

def _reduce_325(val, _values, result)
result = val[0]
    result
end

def _reduce_326(val, _values, result)
result = val[0]
    result
end

def _reduce_327(val, _values, result)
result = SharedDefinitionNode.new(val[0])
    result
end

def _reduce_328(val, _values, result)
 result = OperationNode.new(val[0], val[2], nil)
    result
end

def _reduce_329(val, _values, result)
 result = OperationNode.new(val[0], val[2], val[4])
    result
end

def _reduce_330(val, _values, result)
  result = OperationNode.new(val[0], val[2], nil)
    result
end

def _reduce_331(val, _values, result)
  result = OperationNode.new(val[0], val[2], nil)
    result
end

def _reduce_332(val, _values, result)
 result = AddressNode.new(val[1])
    result
end

def _reduce_333(val, _values, result)
 result = CommentNode.new(val[0])
    result
end

def _reduce_334(val, _values, result)
 result = MessageNode.new(val[2])
    result
end

def _reduce_335(val, _values, result)
 result = WarningNode.new(MessageNode.new(val[2]))
    result
end

def _reduce_336(val, _values, result)
 result = TerminatorNode.new
    result
end

def _reduce_337(val, _values, result)
 result = val[0]
    result
end

# reduce 338 omitted

# reduce 339 omitted

def _reduce_340(val, _values, result)
 result = TerminatorNode.new
    result
end

# reduce 341 omitted

def _reduce_342(val, _values, result)
 result = PositionDataNode.new(val[2])
    result
end

# reduce 343 omitted

def _reduce_344(val, _values, result)
 result = val[2]
    result
end

def _reduce_345(val, _values, result)
 result = {}
    result
end

def _reduce_346(val, _values, result)
 result = val[0]
    result
end

def _reduce_347(val, _values, result)
 result = val[0].merge(val[3])
    result
end

def _reduce_348(val, _values, result)
 result = { val[0].to_sym => val[2] }
    result
end

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

def _reduce_353(val, _values, result)
 val[1] = val[1].to_i * -1 if val[0] == "-"; result = val[1]
    result
end

def _reduce_354(val, _values, result)
 val[1] = val[1].to_f * -1 if val[0] == "-"; result = val[1]
    result
end

def _reduce_355(val, _values, result)
 result = val[0] == "true"
    result
end

# reduce 356 omitted

# reduce 357 omitted

def _reduce_358(val, _values, result)
 result = val[2]
    result
end

def _reduce_359(val, _values, result)
 result = val
    result
end

def _reduce_360(val, _values, result)
 result = val[0] << val[3]
    result
end

# reduce 361 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module TPPlus
